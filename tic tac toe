#include <stdio.h>
#include <stdbool.h>

#define SIZE 3

char board[SIZE][SIZE];

void initializeBoard()
{
    for (int i=0;i<SIZE;i++) 
    {
        for (int j=0;j<SIZE;j++) 
        {
            board[i][j]=' ';
        }
    }
}

void displayBoard() 
{
    for (int i=0;i<SIZE;i++)
    {
        for (int j=0;j<SIZE;j++) 
        {
            printf(" %c ", board[i][j]);
            if (j!=SIZE-1)
            {
                printf("|");
            }
        }
        printf("\n");
        if (i!=SIZE-1)
        {
            printf("-----------\n");
        }
    }
}
bool isBoardFull()
{
    for (int i=0;i<SIZE;i++)
    {
        for (int j=0;j<SIZE;j++) 
        {
            if (board[i][j]==' ') 
            {
                return false;
            }
        }
    }
    return true;
}
bool isGameOver(char player) 
{
    for (int i=0; i<SIZE;i++) 
    {
        if (board[i][0]==player && board[i][1]==player && board[i][2]==player) 
        {
            return true;
        }
    }
    for (int i=0;i<SIZE;i++) 
    {
        if (board[0][i]==player && board[1][i]==player && board[2][i]==player)
        {
            return true;
        }
    }
    if ((board[0][0]==player && board[1][1]==player && board[2][2]==player) ||
        (board[0][2]==player && board[1][1]==player && board[2][0]==player))
        {
        return true;
    }

    return false;
}
bool isValidMove(int row, int col)
{
    if (row>=0 && row<SIZE && col>=0 && col<SIZE && board[row][col]==' ') 
    {
        return true;
    }
    return false;
}

void makeMove(int row, int col, char player) 
{
    board[row][col]=player;
}
bool minimax(char player, int* bestRow, int* bestCol) 
{
    int bestScore=-1000;
    int score;

    if (isGameOver('X'))
    {
        return -1;
    }
    else if (isGameOver('O')) 
    {
        return 1;
    }
    else if (isBoardFull()) 
    {
        return 0;
    }

    for (int i=0; i<SIZE;i++) 
    {
        for (int j=0; j<SIZE;j++) 
        {
            if (board[i][j]==' ') 
            {
                board[i][j]=player;

                if (player=='O') 
                {
                    score = minimax('X',bestRow,bestCol);
                    if (score>bestScore) 
                    {
                        bestScore=score;
                        *bestRow=i;
                        *bestCol=j;
                    }
                } 
                else 
                {
                    score=minimax('O',bestRow,bestCol);
                    if (score<bestScore) 
                    {
                        bestScore=score;
                        *bestRow=i;
                        *bestCol=j;
                    }
                }

                board[i][j]=' ';
            }
        }
    }

    return bestScore;
}
void playGame() 
{
    int row, col;
    char player='X';

    printf("Welcome to Tic-Tac-Toe!\n");
    printf("You are X, and the AI is O.\n");
    printf("Enter row (0-%d) and column (0-%d) to make a move.\n", SIZE- 1, SIZE- 1);
    initializeBoard();

    while (true)
    {
        displayBoard();

        if (player=='X') 
        {
            printf("Your turn. Enter row and column: ");
            scanf("%d %d",&row,&col);
            printf("\n");

            if (isValidMove(row,col)) 
            {
                makeMove(row,col,player);
                if (isGameOver(player)) 
                {
                    printf("Congratulations! You win!\n");
                    displayBoard();
                    break;
                } else if (isBoardFull()) 
                {
                    printf("It's a tie!\n");
                    displayBoard();
                    break;
                }
                player='O';
            }
            else
            {
                printf("Invalid move. Try again.\n");
            }
        } 
        else
        {
            printf("AI's turn...\n");
            int bestRow,bestCol;
            minimax('O',&bestRow,&bestCol);
            makeMove(bestRow,bestCol,player);

            if (isGameOver(player)) 
            {
                printf("AI wins!\n");
                displayBoard();
                break;
            } else if (isBoardFull())
            {
                printf("It's a tie!\n");
                displayBoard();
                break;
            }
            player='X';
        }
    }
}

int main() 
{
    playGame();
    return 0;
}


